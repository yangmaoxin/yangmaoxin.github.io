<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moxinn&#39;s Blog</title>
  <subtitle>一个前端菜鸟的成长笔记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://moxinn.com/"/>
  <updated>2018-07-17T06:57:21.054Z</updated>
  <id>https://moxinn.com/</id>
  
  <author>
    <name>Moxinn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>VSCode 配置备份与同步</title>
    <link href="https://moxinn.com/2018/07/17/vscode-backup/"/>
    <id>https://moxinn.com/2018/07/17/vscode-backup/</id>
    <published>2018-07-17T03:01:39.000Z</published>
    <updated>2018-07-17T06:57:21.054Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">一个非常有用的 VSCode 插件Settings Sync，备份和同步 VSCode 的设置，操作系统和多端同步不用再折腾 VSCode 配置。</blockquote><br><a id="more"></a></p>
<h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在扩展商店中搜索并安装插件 <strong>setting sync</strong> </p>
<blockquote>
<p><strong>setting sync</strong> 是vscode中同步设置和安装插件的小工具</p>
</blockquote>
<h2 id="利用github帐户进行备份"><a href="#利用github帐户进行备份" class="headerlink" title="利用github帐户进行备份"></a>利用github帐户进行备份</h2><ol>
<li><p>登陆github&gt;用户头像 &gt; settings &gt; developers &gt; Personal access tokens &gt; Generate new token</p>
</li>
<li><p>输入描述比如vscode ,勾选gist,&gt; generate token</p>
</li>
<li><p>保存生成的token。</p>
</li>
</ol>
<h2 id="在vscode-上配置"><a href="#在vscode-上配置" class="headerlink" title="在vscode 上配置"></a>在vscode 上配置</h2><ol>
<li><p>快捷键 shift+alt+u 或 ctrl+p 输入&gt;sync点击update/updload settings</p>
</li>
<li><p>把之前复制的access token粘贴后回车</p>
</li>
<li><p>成功后跳出如下图，复制GITHUB GIST的内容，在需要同步的另一台电脑上使用</p>
</li>
</ol>
<h2 id="获取gist-id"><a href="#获取gist-id" class="headerlink" title="获取gist id"></a>获取gist id</h2><ol>
<li><p>先进入到： </p>
<p> <code>https://gist.github.com/&lt;username&gt;</code></p>
</li>
<li><p>点击你的gist文件,url上的最后的参数就是gist id</p>
<p><code>https://gist.github.com/&lt;username&gt;/&lt;gist id&gt;</code></p>
</li>
</ol>
<h2 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h2><ol>
<li><p>在需要同步的电脑打开VSCode,安装相同的插件</p>
</li>
<li><p>按快捷键 shift+alt+d 或 ctrl+p 输入&gt;sync点击Download Settings</p>
</li>
<li><p>把GITHUB GIST的gist id和内容粘贴然后回车</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;一个非常有用的 VSCode 插件Settings Sync，备份和同步 VSCode 的设置，操作系统和多端同步不用再折腾 VSCode 配置。&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="效率" scheme="https://moxinn.com/tags/%E6%95%88%E7%8E%87/"/>
    
      <category term="备份" scheme="https://moxinn.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>Git命令速查表－好记性不如一张表</title>
    <link href="https://moxinn.com/2016/11/22/git/"/>
    <id>https://moxinn.com/2016/11/22/git/</id>
    <published>2016-11-22T00:15:54.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">记录常用Git命令</blockquote><br><a id="more"></a></p>
<h2 id="Git常用命令速查表"><a href="#Git常用命令速查表" class="headerlink" title="Git常用命令速查表"></a>Git常用命令速查表</h2><p><img src="http://photo.yangmaoxin.cn/git.png" alt="git"></p>
<p>这张表包含了大部分我们上传项目代码时用到的命令。</p>
<h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><blockquote>
<p>1.初始化一个代码仓库<br>git init<br>2.如果使用git必须给git配置一个用户名和邮箱<br>给当前的git仓库配置一个用户名和邮箱<br>git config user.name “XXX”<br>git config user.email “XXX”<br>配置一个全局的用户名和邮箱<br>git config —global user.name “XXX”<br>git config —global user.email “XXX”<br>3.初始化项目<br>touch main.m : 创建了main.m<br>git add main.m : 将新添加的文件或者修改的文件添加到暂存区<br>git commit -m “初始化项目”<br>git add . : 将所有没有被添加到暂存区或者代码仓库的文件添加到暂存区<br>注意:无论是新添加的文件或者修改的文件,都需要先通过add命令添加到暂存区中,之后再通过commit命令添加到本地仓库中<br>4.查看文件的状态 git status<br>红色 : 新创建的文件或者被修改的文件,没有被添加到暂存区<br>绿色 : 表示文件在暂存区,但是没有被添加到本地仓库中<br>5.给命令起别名<br>git config alias.st “status”<br>git config alias.ci “commit -m”<br>git config —global alias.st “status”<br>6.git删除文件<br>git rm 文件名<br>7.查看版本号<br>git log<br>git reflog<br>git config –global alias.lg “log –color –graph -<br>8.git的版本号是由sha1算法生成40位的哈希值<br>9.版本回退<br>git reset —hard HEAD : 回退到当前的版本<br>git reset —hard HEAD^ : 回退到上一个版本<br>git reset —hard HEAD^^ : 回退到上上个版本<br>git reset —hard HEAD~100 : 回退到前100版本<br>git reset -hard 版本号(前5位)</p>
</blockquote>
<h2 id="团队-共享版本库"><a href="#团队-共享版本库" class="headerlink" title="团队(共享版本库)"></a>团队(共享版本库)</h2><blockquote>
<p>1.初始项目<br>git init —bare<br>2.项目经理将共享版本库的内容先下载下来<br>git clone 地址<br>3.添加需要忽略的文件<br>touch .gitignore<br>去github上搜索.gitignore-&gt;Objective-C<br>git add .gitignore<br>git commit -m “添加了需要忽略的文件”<br>4.项目经理初始化项目<br>git commit -m “初始化项目”—&gt;提交到本地代码仓库<br>5.将项目push远程仓库中<br>git push origin<br>6.当源代码管理是使用GIT,并且在Xcode进行多人开发的操作<br>注意:当使用GIT,项目中用到了静态库就不需要通过命令行进行添加</p>
</blockquote>
<h2 id="版本备份"><a href="#版本备份" class="headerlink" title="版本备份"></a>版本备份</h2><blockquote>
<p>1.1.0版本开发完成,之后对1.0版本进行备份<br>git tag -a weibo1.0 -m “这个是1.0版本” : 给某一个版本打上标签<br>git tag : 查看所有的标签<br>2.需要将1.0版本的标签,push到服务器<br>git push origin weibo1.0<br>3.继续开发2.0版本<br>4.发现1.0版本有bug,从标签里面clone 1.0版本,从标签创建一个fixbug分支,在分支中修复bug<br>git clone 共享版本库<br>git checkout weibo1.0(标签的名称)<br>git checkout -b weibo1.1fixbug(分支名称)<br>5.修复后的版本上传AppStore/将1.0fixbug进行备份/将1.0fixbug版本和2.0版本进行合并\<br>git tag -a weibo1.1 -m “这个是修复了1.0版本bug的1.1版本”<br>git tag<br>git push origin weibo1.1<br>将子分支中代码合并到主分支,pull—&gt;weibo1.1fixbug—&gt;push master—&gt;其它同事更新<br>6.删除分支<br>git branch -r<br>git branch -r -d 分支名称</p>
</blockquote>
<h2 id="将代码托管至别人的服务器上"><a href="#将代码托管至别人的服务器上" class="headerlink" title="将代码托管至别人的服务器上"></a>将代码托管至别人的服务器上</h2><blockquote>
<p>1.Github<br>创建Github上的仓库<br>1) HTTPS : http + SSL<br>2) SSH : 公钥和私钥—&gt;settings—&gt;SSH Keys—&gt;生成公钥和私钥<br>删除代码仓库<br>可以给别人的代码提比较功能/对别人的代码重构:fork—&gt;pull Request<br>issues : 给框架作者提问题</p>
<p>参考阅读</p>
<ul>
<li><a href="http://www.jianshu.com/p/0c808b2ee952" target="_blank" rel="external">详细流程可参考 </a> </li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;记录常用Git命令&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://moxinn.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>自动备份与恢复Hexo博客源文件</title>
    <link href="https://moxinn.com/2016/09/01/automatic-backup/"/>
    <id>https://moxinn.com/2016/09/01/automatic-backup/</id>
    <published>2016-09-01T04:08:51.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">此文记录自动备份Hexo博客源文件到Github，并且从Github恢复到新电脑的过程。</blockquote><br><a id="more"></a></p>
<h1 id="自动备份Hexo博客源文件"><a href="#自动备份Hexo博客源文件" class="headerlink" title="自动备份Hexo博客源文件"></a>自动备份Hexo博客源文件</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份。<br>通过查阅Hexo文档，找到了Hexo的主要事件，见下表：</p>
<table>
<thead>
<tr>
<th>事件名</th>
<th style="text-align:right">事件发生时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>deployBefore</td>
<td style="text-align:right">在部署完成前发布</td>
</tr>
<tr>
<td>deployAfter</td>
<td style="text-align:right">在部署成功后发布</td>
</tr>
<tr>
<td>exit</td>
<td style="text-align:right">在 Hexo 结束前发布</td>
</tr>
<tr>
<td>generateBefore</td>
<td style="text-align:right">在静态文件生成前发布</td>
</tr>
<tr>
<td>generateAfter</td>
<td style="text-align:right">在静态文件生成后发布</td>
</tr>
<tr>
<td>new</td>
<td style="text-align:right">在文章文件建立后发布</td>
</tr>
</tbody>
</table>
<p>于是我们就可以通过监听Hexo的deployAfter事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>将Hexo目录加入Git仓库</p>
<ol>
<li><p>在Github下创建一个新的repository，取名为HEXO。(与本地的Hexo源码文件夹同名即可)进入本地的Hexo文件夹，执行以下命令创建仓库:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">git init</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置远程仓库地址，并更新:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@github<span class="selector-class">.com</span>:XXX/XXX<span class="selector-class">.git</span> git pull origin</div><div class="line">master</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>.gitignore</code>文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及.<code>deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。</p>
</li>
<li><p>执行命令以下命令，完成Hexo源码在本地的提交:</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">add</span><span class="bash"> .</span></div><div class="line"><span class="bash">git commit -m <span class="string">"添加hexo源码文件作为备份"</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>执行以下命令，将本地的仓库文件推送到Github:</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">push</span> <span class="built_in">origin</span> master</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="安装shelljs模块"><a href="#安装shelljs模块" class="headerlink" title="安装shelljs模块"></a>安装shelljs模块</h3><p>要实现这个自动备份功能，需要依赖<code>Node.js</code>的一个<code>shelljs</code>模块,该模块重新包装了child_process,调用系统命令更加的方便。该模块需要安装后使用。</p>
<p>在命令中键入以下命令，完成shelljs模块的安装：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> <span class="comment">--save shelljs</span></div></pre></td></tr></table></figure></p>
<h3 id="编写自动备份脚本"><a href="#编写自动备份脚本" class="headerlink" title="编写自动备份脚本"></a>编写自动备份脚本</h3><p>待到模块安装完成，在Hexo根目录的scripts文件夹下新建一个js文件，文件名随意取。</p>
<p>ps: 如果没有scripts目录，请新建一个。</p>
<p>然后在脚本中，写入以下内容：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">require(<span class="string">'shelljs/global'</span>);</div><div class="line"></div><div class="line">try &#123;</div><div class="line">    hexo.on(<span class="string">'deployAfter'</span>, <span class="keyword">function</span>() &#123;<span class="regexp">//</span>当deploy完成后执行备份</div><div class="line">        run();</div><div class="line">    &#125;);</div><div class="line">&#125; catch (e) &#123;</div><div class="line">    console.log(<span class="string">"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为："</span> + e.toString());</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">function</span> run() &#123;</div><div class="line">    <span class="keyword">if</span> (!which(<span class="string">'git'</span>)) &#123;</div><div class="line">        echo(<span class="string">'Sorry, this script requires git'</span>);</div><div class="line">        <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        echo(<span class="string">"======================Auto Backup Begin==========================="</span>);</div><div class="line">        cd(<span class="string">'F:/geeknote'</span>);    <span class="regexp">//</span>此处修改为Hexo根目录路径</div><div class="line">        <span class="keyword">if</span> (exec(<span class="string">'git add --all'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">            echo(<span class="string">'Error: Git add failed'</span>);</div><div class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exec(<span class="string">'git commit -am "Form auto backup script\'s commit"'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">            echo(<span class="string">'Error: Git commit failed'</span>);</div><div class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (exec(<span class="string">'git push origin master'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">            echo(<span class="string">'Error: Git push failed'</span>);</div><div class="line">            <span class="keyword">exit</span>(<span class="number">1</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        echo(<span class="string">"==================Auto Backup Complete============================"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中，需要修改第17行的D:/hexo路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</p>
<p>如果你的Git远程仓库名称不为origin的话，还需要修改第28行执行的push命令，修改成自己的远程仓库名和相应的分支名。</p>
<p>保存脚本并退出，然后执行hexo deploy命令，将会得到类似以下结果:<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="literal">INF</span>O  Deploying: git&gt;</div><div class="line"><span class="literal">INF</span>O  Clearing .deploy folder...</div><div class="line"><span class="literal">INF</span>O  Copying files from public folder...</div><div class="line">[<span class="keyword">master</span> <span class="title">3020788</span>] Site updated: <span class="number">2015</span>-<span class="number">07</span>-<span class="number">06</span> <span class="number">15</span>:<span class="number">08</span>:<span class="number">06</span></div><div class="line"> <span class="number">5</span> files changed, <span class="number">160</span> insertions(+), <span class="number">58</span> deletions(-)</div><div class="line">Branch <span class="keyword">master</span> <span class="title">set</span> up to track remote branch gh-pages from git@github.com:smilexi</div><div class="line">amo/notes.git.</div><div class="line">To git@github.com:smilexiamo/notes.git</div><div class="line">   <span class="number">02</span>adbe4..<span class="number">3020788</span>  <span class="keyword">master</span> <span class="title">-&gt; gh-pages</span></div><div class="line">On branch <span class="literal">master</span></div><div class="line">nothing to commit, working directory clean</div><div class="line">Branch <span class="keyword">master</span> <span class="title">set</span> up to track remote branch gitcafe-pages from git@gitcafe.com:s</div><div class="line">milexiamo/smilexiamo.git.</div><div class="line">To git@gitcafe.com:smilexiamo/smilexiamo.git</div><div class="line">   <span class="number">02</span>adbe4..<span class="number">3020788</span>  <span class="keyword">master</span> <span class="title">-&gt; gitcafe-pages</span></div><div class="line"><span class="literal">INF</span>O  Deploy done: git</div><div class="line">======================Auto Backup <span class="attr">Begin=</span>==========================</div><div class="line">[<span class="keyword">master</span> <span class="title">f044360</span>] Form auto backup script's commit</div><div class="line"> <span class="number">2</span> files changed, <span class="number">35</span> insertions(+), <span class="number">2</span> deletions(-)</div><div class="line"> rewrite db.json (<span class="number">100</span>%)</div><div class="line">To git@github.com:smilexiamo/hexo.git</div><div class="line">   <span class="number">8</span>f2b4b4..f044360  <span class="keyword">master</span> <span class="title">-&gt; master</span></div><div class="line">==================Auto Backup <span class="attr">Complete=</span>===========================</div></pre></td></tr></table></figure></p>
<p>这样子，每次更新博文并deploy到服务器上之后，备份就自动启动并完成备份啦</p>
<h1 id="恢复Hexo博客源文件"><a href="#恢复Hexo博客源文件" class="headerlink" title="恢复Hexo博客源文件"></a>恢复Hexo博客源文件</h1><p>切换电脑以后，在新电脑上安装node、git环境，配置github sshkey</p>
<p>创建空目录作为hexo工作目录，从远程仓库中clone出之前备份的repo<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">git</span>@github.com:xxx/geeknote.git</div></pre></td></tr></table></figure></p>
<p>git clone成功后，本地出现geeknote文件夹，开始安装hexo环境<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd geeknote</div><div class="line">npm <span class="keyword">install</span> hexo</div><div class="line">npm <span class="keyword">install</span></div><div class="line">npm <span class="keyword">install</span> hexo-deployer-git</div><div class="line">npm <span class="keyword">install</span> <span class="comment">--save shelljs</span></div></pre></td></tr></table></figure></p>
<p>之后执行<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g</div><div class="line">hexo <span class="keyword">server</span></div></pre></td></tr></table></figure></p>
<p>查看本地同步效果，访问localhost:4000</p>
<p>注意：<br><strong>这里不会备份hexo主题文件</strong></p>
<p>更新历史</p>
<ul>
<li>2016年9月1日 13:30 增加恢复Hexo博客源文件</li>
</ul>
<blockquote>
<p>参考阅读</p>
<ul>
<li><a href="http://notes.xiamo.tk" target="_blank" rel="external">自动备份Hexo博客源文件</a> (原博主网站已经无法打开)</li>
<li><a href="http://zhujiegao.com/2015/12/06/automatic-backup/" target="_blank" rel="external">自动备份Hexo博客源文件</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;此文记录自动备份Hexo博客源文件到Github，并且从Github恢复到新电脑的过程。&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://moxinn.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://moxinn.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>把Hexo同时部署到GitHub和Coding</title>
    <link href="https://moxinn.com/2016/08/31/hexo-coding-github/"/>
    <id>https://moxinn.com/2016/08/31/hexo-coding-github/</id>
    <published>2016-08-31T12:15:54.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">因为Gitcafe已经被Coding收购，修改同时更新到Github以及Coding。</blockquote><br><a id="more"></a></p>
<h2 id="设置Coding"><a href="#设置Coding" class="headerlink" title="设置Coding"></a>设置Coding</h2><p>在Coding上创建一个项目，项目名最好与注册时的账户用户名相同，这样比较方便。在之后使用Coding Pages可以通过 <code>{用户名}.coding.me</code> 形式的 URL 直接访问。</p>
<h2 id="设置SSH"><a href="#设置SSH" class="headerlink" title="设置SSH"></a>设置SSH</h2><p>如果是第一次使用coding的话，需要设置SSH公钥，生成的方法可以参考<a href="https://coding.net/help/doc/git/ssh-key.html" target="_blank" rel="external">coding帮助中心</a></p>
<p>之前我在部署Github时已经配置过Github的公钥，所以这里直接使用。<br><img src="http://photo.yangmaoxin.cn/addssh.png" alt="ssh目录"></p>
<p>本地文件夹中存在了，一般存放在<code>~/.ssh/id_rsa.pub</code>。复制这个文件夹下的<code>id_rsa.pub</code> 内容添加在coding的个人页面内，如下<br><img src="http://photo.yangmaoxin.cn/coding1.png" alt="1"></p>
<blockquote>
<p>注意这是在个人账户下添加了ssh,以后新建了项目，项目也有个ssh，但是那个是只读的，不要加到那里去。只需要在个人账户下，加入了即可。</p>
</blockquote>
<p>验证是否连接成功:</p>
<p><code>ssh -T git@git.coding.net</code></p>
<p>提示如下即可：<br><code>Hello iymx You&#39;ve connected to Coding.net by SSH successfully!</code></p>
<h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>修改Hexo根目录下的_config.yml文件中的deploy<br>根据Hexo官方文档需要修改成下面的形式</p>
<blockquote>
<p>deploy:<br>  type: git<br>  message: [message]<br>  repo:<br>    github: <repository url="">,[branch]<br>    gitcafe: <repository url="">,[branch] </repository></repository></p>
</blockquote>
<p>例如我的是这样<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">message</span>: <span class="string">""</span></div><div class="line">  <span class="attribute">repo</span>: </div><div class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yangmaoxin/yangmaoxin.github.io.git,master</div><div class="line">    <span class="attribute">coding</span>: git<span class="variable">@git</span>.coding.<span class="attribute">net</span>:iymx/iymx.git,master</div></pre></td></tr></table></figure></p>
<p>将自己在Github和Coding上的git填进去</p>
<p>最后使用部署命令就能把博客同步到coding上面：<br><code>hexo deploy -g</code></p>
<h2 id="Coding-Pages服务方式部署"><a href="#Coding-Pages服务方式部署" class="headerlink" title="Coding Pages服务方式部署"></a>Coding Pages服务方式部署</h2><p>和Github Pages一样。项目名字必须与Coding的用户名一致。</p>
<blockquote>
<p>在source/需要创建一个空白文件，至于原因，是因为<br>coding.net需要这个文件来作为以静态文件部署的标志。就是说看到这个Staticfile就知道按照静态文件来发布。</p>
</blockquote>
<pre><code>cd source/
touch Staticfile  #名字必须是Staticfile
</code></pre><p>只需要在这里开启Page<br><img src="http://photo.yangmaoxin.cn/codingpages.png" alt="codingpages"></p>
<p>因为前面配置的分支是master,因此需要部署分支master。</p>
<p>如果项目名和Coding的用户名一样，比如我的用户是iyxm,博客项目名也是iymx<br>那直接访问  <a href="http://igeek.wang" target="_blank" rel="external">iymx.coding.me</a><br>就能访问博客，否则就要带上项目名：iymx.coding.me/项目名 才能访问<br>推荐项目名跟用户名一样，这样就可以省略项目名。</p>
<h2 id="万网域名双线解析"><a href="#万网域名双线解析" class="headerlink" title="万网域名双线解析"></a>万网域名双线解析</h2><p>进入万网/阿里云后台，域名解析：</p>
<p><img src="http://photo.yangmaoxin.cn/githubcoding.png" alt="域名解析"></p>
<p>添加两条CNAME，分别解析，解析路线选择默认至Coding，海外IP至GitHub。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;因为Gitcafe已经被Coding收购，修改同时更新到Github以及Coding。&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://moxinn.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://moxinn.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>多列布局方案整理</title>
    <link href="https://moxinn.com/2016/02/27/layout/"/>
    <id>https://moxinn.com/2016/02/27/layout/</id>
    <published>2016-02-27T04:53:40.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>了解 CSS 中属性的值及其特性， 透彻分析问题和需求才可以选择和设计最适合的布局解决方案。</p>
</blockquote>
<p>多列布局在网页中非常常见（例如两列布局），多列布局可以是两列定宽，一列自适应， 或者多列不定宽一列自适应还有等分布局等。<br><a id="more"></a></p>
<h2 id="定宽-自适应"><a href="#定宽-自适应" class="headerlink" title="定宽-自适应"></a>定宽-自适应</h2><p>有如下布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="float-margin"><a href="#float-margin" class="headerlink" title="float+margin"></a>float+margin</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span> &#123;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span></div><div class="line">  <span class="comment">/*间距可再加入 margin-left */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xkrpj.com1.z1.glb.clouddn.com/float+margin.png" alt="图片描述"></p>
<p>优点：容易理解<br>缺点：IE6中会有3像素的BUG， 解决方法可以在.left 加入 <code>margin-left:-3px</code>。<br>因为left是浮动元素，right是没有浮动的，如果right内容中有清楚浮动就会产生bug。</p>
<p><img src="http://7xkrpj.com1.z1.glb.clouddn.com/float+margin-bug.png" alt="图片描述"></p>
<h3 id="改进：float-margin-fix"><a href="#改进：float-margin-fix" class="headerlink" title="改进：float + margin + (fix)"></a>改进：float + margin + (fix)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>left<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    /*外层在包裹一个容器*/</div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-fix"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>right<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="css">  <span class="selector-class">.left</span> &#123;</span></div><div class="line"><span class="undefined">    float: left;</span></div><div class="line"><span class="undefined">    width: 100px;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="css">  <span class="selector-class">.right-fix</span> &#123;</span></div><div class="line"><span class="undefined">    float: right;</span></div><div class="line"><span class="undefined">    width: 100%;</span></div><div class="line"><span class="undefined">    margin-left: -100px;</span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="css">  <span class="selector-class">.right</span> &#123;</span></div><div class="line"><span class="undefined">    margin-left: 100px</span></div><div class="line"><span class="css">    <span class="comment">/*间距可再加入 margin-left */</span></span></div><div class="line"><span class="undefined">  &#125;</span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>兼容性很好，适用于多版本浏览器（包括 IE6）但是多了层right-fix的结构。但left不可选择，被right-fix盖住。需要设置left的 <code>position: relative;</code>来提高层级。</p>
<h3 id="float-overflow"><a href="#float-overflow" class="headerlink" title="float+overflow"></a>float+overflow</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>&#123; </div><div class="line">      <span class="attribute">float</span>: left;</div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.right</span>&#123; <span class="attribute">overflow</span>: hidden; <span class="comment">//触发BFC &#125;</span></div></pre></td></tr></table></figure>
<p><code>overflow:hidden</code>使得div产生了BFC 模式（Block Formatting Context）块级格式化文本，根据BFC的布局规则之一，div那个产生的BFC区域不会与左边浮动的元素所重叠。具体什么是BFC可以看看这篇<a href="http://www.cnblogs.com/dojo-lzz/p/3999013.html" target="_blank" rel="external">文章</a></p>
<h3 id="table"><a href="#table" class="headerlink" title="table"></a>table</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">   <span class="attribute">display</span>: table;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">   <span class="attribute">table-layout</span>: fixed;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.left</span> &#123;</div><div class="line">   <span class="attribute">display</span>: table-cell;</div><div class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.right</span> &#123;</div><div class="line">   <span class="attribute">display</span>: table-cell;</div><div class="line">   <span class="comment">/*宽度为剩余宽度*/</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p><code>table</code> 的显示特性为每列的单元格宽度合一定等与表格宽度。 <code>table-layout: fixed;</code> 可加速渲染，也是设定布局优先。</p>
<p><code>table-cell</code> 中不可以设置 <code>margin</code> 但是可以通过 <code>padding</code> 来设置间距。</p>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; </div><div class="line">     <span class="attribute">display</span>: flex ; </div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.left</span> &#123; </div><div class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</div><div class="line">      <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.right</span>&#123;</div><div class="line">	<span class="comment">/*等价于flex:1 1 0; 增长因子和收缩因子都为1，</span></div><div class="line"><span class="comment">        基础宽度为0,那么剩余宽度都分配给right*/</span></div><div class="line">       <span class="attribute">flex</span>: <span class="number">1</span> ; </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><code>flex-item</code> 默认为内容宽度。<br>缺点： CSS3 兼容性。根据内容判断，性能会有问题，做小范围布局，不适合大范围布局。</p>
<h2 id="不定宽-自适应"><a href="#不定宽-自适应" class="headerlink" title="不定宽-自适应"></a>不定宽-自适应</h2><p><img src="http://7xkrpj.com1.z1.glb.clouddn.com/%E4%B8%8D%E5%AE%9A%E5%AE%BD+%E8%87%AA%E9%80%82%E5%BA%94.png" alt="图片描述"></p>
<h3 id="float-overflow-1"><a href="#float-overflow-1" class="headerlink" title="float + overflow"></a>float + overflow</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.left</span>&#123; </div><div class="line">     <span class="attribute">float</span>: left;</div><div class="line">     <span class="attribute">width</span>: <span class="number">200px</span>;</div><div class="line">     <span class="attribute">margin-right</span>: <span class="number">20px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.right</span>&#123; <span class="attribute">overflow</span>: hidden; <span class="comment">//触发BFC &#125;</span></div></pre></td></tr></table></figure>
<h3 id="table-1"><a href="#table-1" class="headerlink" title="table"></a>table</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.parent&#123; </div><div class="line">     <span class="attribute">display</span>:table; </div><div class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line"> &#125;</div><div class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span> &#123; </div><div class="line">      <span class="attribute">display</span>: table-cell;</div><div class="line"> &#125;</div><div class="line"> .<span class="attribute">left</span>&#123; </div><div class="line">      <span class="attribute">width</span>:<span class="number">0.1%</span>;  <span class="comment">//写的够小就行，不写1px的原因是IE8会有问题</span></div><div class="line">      <span class="attribute">padding-right</span>:<span class="number">20px</span>; </div><div class="line">  &#125;</div><div class="line"> <span class="selector-class">.left</span> p&#123; <span class="attribute">width</span> : <span class="number">200px</span>;&#125;  <span class="comment">//用内部元素撑开，宽度可以不定</span></div></pre></td></tr></table></figure>
<h3 id="flex-1"><a href="#flex-1" class="headerlink" title="flex"></a>flex</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;<span class="attribute">display</span>:flex;&#125;</div><div class="line"><span class="selector-class">.left</span>&#123;<span class="attribute">margin-right</span>:<span class="number">20px</span>;&#125;</div><div class="line"><span class="selector-class">.right</span>&#123;<span class="attribute">flex</span>:<span class="number">1</span>;&#125;</div></pre></td></tr></table></figure>
<p>三列不定宽 + 自适应 与两列的做法一样</p>
<h2 id="等分布局"><a href="#等分布局" class="headerlink" title="等分布局"></a>等分布局</h2><p>每一列的宽度和间距均相等。<br>有如下HTML结构<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</div><div class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"column"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"column"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"column"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">	&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"column"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/div&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="float"><a href="#float" class="headerlink" title="float"></a>float</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">   <span class="attribute">margin-left</span> ：-20px; <span class="comment">//为父元素增加20px宽度</span></div><div class="line">   &#125;</div><div class="line"><span class="selector-class">.column</span>&#123;</div><div class="line">      <span class="attribute">float</span> : left;</div><div class="line">      <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">      <span class="attribute">padding-left</span> : <span class="number">20px</span>;</div><div class="line">      <span class="attribute">box-sizing</span> : border-box;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xkrpj.com1.z1.glb.clouddn.com/%E7%AD%89%E5%88%86%E5%B8%83%E5%B1%80%E6%95%88%E6%9E%9C%E5%9B%BE.png" alt="图片描述"><br>缺点：结构和样式稍微有点耦合性</p>
<h3 id="table-2"><a href="#table-2" class="headerlink" title="table"></a>table</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent-fix</span>&#123;  <span class="attribute">margin-left</span> ：-20px; <span class="comment">//为父元素增加20px宽度 &#125;</span></div><div class="line"><span class="selector-class">.parent</span>&#123; </div><div class="line">     <span class="attribute">display</span> : table;</div><div class="line">     <span class="attribute">width</span> : <span class="number">100%</span>;</div><div class="line">     <span class="selector-tag">table</span>-layout : fixed;</div><div class="line"> &#125;     </div><div class="line"> <span class="selector-class">.column</span>&#123;</div><div class="line">      <span class="attribute">float</span> : left;</div><div class="line">      <span class="attribute">width</span>: <span class="number">25%</span>;</div><div class="line">      <span class="attribute">padding-left</span> : <span class="number">20px</span>;</div><div class="line">      <span class="attribute">box-sizing</span> : border-box;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="fix"><a href="#fix" class="headerlink" title="fix"></a>fix</h3><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123; </div><div class="line">     <span class="attribute">display</span> : flex;</div><div class="line"> &#125;     </div><div class="line"> <span class="selector-class">.column</span>&#123;</div><div class="line">     <span class="attribute">flex</span>: <span class="number">1</span>;</div><div class="line"> &#125;</div><div class="line"> <span class="selector-class">.column</span>+<span class="selector-class">.column</span>&#123;  <span class="attribute">margin-left</span>: <span class="number">20px</span>;  &#125; <span class="comment">//选择2，3，4</span></div></pre></td></tr></table></figure>
<h2 id="等高需求"><a href="#等高需求" class="headerlink" title="等高需求"></a>等高需求</h2><h3 id="table-3"><a href="#table-3" class="headerlink" title="table"></a>table</h3><p>上面自适应的table布局就具有登高的布局</p>
<h3 id="flex-2"><a href="#flex-2" class="headerlink" title="flex"></a>flex</h3><p>如上面自适应的例子，flex 天然等高</p>
<h3 id="float-1"><a href="#float-1" class="headerlink" title="float"></a>float</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;  <span class="attribute">overflow </span>: hidden; &#125;</div><div class="line"><span class="selector-class">.left</span>, <span class="selector-class">.right</span>&#123;</div><div class="line">      <span class="attribute">padding-bottom </span>: <span class="number">9999px</span>;</div><div class="line">      <span class="attribute">margin-bottom </span>: -<span class="number">9999px</span>;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>优点是兼容性比较好<br>缺点是伪等高 不是正真意义上的登高</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;了解 CSS 中属性的值及其特性， 透彻分析问题和需求才可以选择和设计最适合的布局解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;多列布局在网页中非常常见（例如两列布局），多列布局可以是两列定宽，一列自适应， 或者多列不定宽一列自适应还有等分布局等。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端微专业笔记" scheme="https://moxinn.com/tags/%E5%89%8D%E7%AB%AF%E5%BE%AE%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>网易前端微专业------页面架构笔记</title>
    <link href="https://moxinn.com/2016/02/27/wynotes/"/>
    <id>https://moxinn.com/2016/02/27/wynotes/</id>
    <published>2016-02-27T04:43:18.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS-reset"><a href="#CSS-reset" class="headerlink" title="CSS reset"></a>CSS reset</h2><h3 id="placeholder-颜色重置"><a href="#placeholder-颜色重置" class="headerlink" title="placeholder 颜色重置"></a>placeholder 颜色重置</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">:-moz-placeholder &#123; color:#ccc</span> !important; &#125;</div><div class="line"><span class="meta">::-moz-placeholder &#123; color:#ccc</span> !important; &#125;</div><div class="line"><span class="meta">:-ms-input-placeholder &#123; color:#ccc</span> !important; &#125;</div><div class="line"><span class="meta">:-webkit-input-placeholder &#123; color:#ccc</span> !important; &#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="input-右测-小叉删除"><a href="#input-右测-小叉删除" class="headerlink" title="input 右测 小叉删除"></a>input 右测 小叉删除</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-ms-clear</span>&#123; <span class="attribute">display</span>:none; &#125;</div></pre></td></tr></table></figure>
<h3 id="按钮按下后高亮暗色"><a href="#按钮按下后高亮暗色" class="headerlink" title="按钮按下后高亮暗色"></a>按钮按下后高亮暗色</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">html</span>&#123; <span class="attribute">-webkit-tap-highlight-color</span>: <span class="built_in">rgba</span>(0,0,0,0); &#125;</div></pre></td></tr></table></figure>
<h2 id="布局解决方案"><a href="#布局解决方案" class="headerlink" title="布局解决方案"></a>布局解决方案</h2><p>本文布局都是基于如下HTML结构所言：<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"parent"</span>&gt;</div><div class="line">  &lt;<span class="keyword">div</span> <span class="built_in">class</span>=<span class="string">"child"</span>&gt;Demo&lt;/<span class="keyword">div</span>&gt;</div><div class="line">&lt;/<span class="keyword">div</span>&gt;</div></pre></td></tr></table></figure></p>
<h3 id="居中布局-水平居中"><a href="#居中布局-水平居中" class="headerlink" title="居中布局-水平居中"></a>居中布局-水平居中</h3><p>子元素于父元素水平居中且其（子元素与父元素）宽度均可变。</p>
<h4 id="inline-block-text-align"><a href="#inline-block-text-align" class="headerlink" title="inline-block + text-align"></a>inline-block + text-align</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>inline-block</code> 元素既具有 <code>block</code> 元素可以设置宽高的特性，同时又具有 <code>inline</code> 元素默认不换行的特性。 设置<code>text-align: center;</code> 对 <code>inline</code> 元素起作用，所以说<code>inline-block</code>元素既可以让div像文本一样居中，又不会影响div本身的宽高。</p>
<p>这个方案优点是兼容性非常好，兼容IE6/7 加 <code>*zoom:1;</code><br>缺点就是child里的元素继承paren的<code>text-align: center</code>属性，所以child里的所有内容都会水平居中。要想仅仅是child元素居中，可以在child上加<code>text-align: left</code>来解决。</p>
<h4 id="table-margin"><a href="#table-margin" class="headerlink" title="table + margin"></a>table + margin</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>display: table</code>在表现上类似<code>block</code>元素，但是宽度为内容宽。</p>
<blockquote>
<p>这种方法非常常用，适用于需要用position:static把盒子撑起来的情况下的水平居中。</p>
</blockquote>
<p>这个方案的优点很明显，无需设置父元素样式，只需对自己进行设置。<br>兼容IE6/7需要把HTML调整为<code>&lt;table&gt;</code>的结构。</p>
<h4 id="absolute-transform"><a href="#absolute-transform" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  <span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">position</span>: relative;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.child</span> &#123;</div><div class="line">    <span class="attribute">position</span>: absolute;</div><div class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</div><div class="line">  &#125;</div><div class="line">`</div></pre></td></tr></table></figure>
<p>absolute元素的宽度也是由内容决定。<br><code>left: 50%;</code>参照物是parent，使child的左侧移至parent的水平中央处.<br>然后运用transform的<code>translate</code>的方法，其中百分比的参照物是自身，所以是以自身宽度的一半向左边偏移。<br>方案优点：绝对定位脱离文档流，不会对后续元素的布局造成影响。<br>缺点：transform为CSS3属性，有兼容性问题。IE6/7/8不兼容。</p>
<h4 id="flex-justify-content"><a href="#flex-justify-content" class="headerlink" title="flex + justify-content"></a>flex + justify-content</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 或者下面的方法，可以达到一样的效果 */</span></div><div class="line"> </div><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优点只需设置父节点属性，无需设置子元素。<br>缺点IE6/7/8不兼容。</p>
<h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="居中布局-垂直居中"><a href="#居中布局-垂直居中" class="headerlink" title="居中布局-垂直居中"></a>居中布局-垂直居中</h3><h4 id="表格单元特性-table-cell-table-cell-vertical-align"><a href="#表格单元特性-table-cell-table-cell-vertical-align" class="headerlink" title="表格单元特性(table-cell):table-cell + vertical-align"></a>表格单元特性(table-cell):table-cell + vertical-align</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">display</span>: table-cell; </div><div class="line">    <span class="attribute">vertical-align</span>: middle; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时<code>parent</code>元素会变为单元格。<br>vertical-align可以作用于inline,inline-block 以及 table-cell元素。<br>这种做法兼容IE8。</p>
<h4 id="absolute-transform-1"><a href="#absolute-transform-1" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span>&#123;</div><div class="line">    <span class="attribute">position</span>：relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span>&#123;  </div><div class="line">    <span class="attribute">position</span>: absolute; </div><div class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; </div><div class="line">    <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>和水平居中类似</p>
<h4 id="flex-align-items"><a href="#flex-align-items" class="headerlink" title="flex + align-items"></a>flex + align-items</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">    <span class="attribute">align-items</span>: center;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>优点:只需设置父节点属性，无需设置子元素<br>缺点:有兼容性问题</p>
<h3 id="居中布局-水平、垂直同时居中"><a href="#居中布局-水平、垂直同时居中" class="headerlink" title="居中布局-水平、垂直同时居中"></a>居中布局-水平、垂直同时居中</h3><p>综合前面的水平居中和垂直居中方法来实现。</p>
<h4 id="inline-block-text-align-table-cell-vertical-align"><a href="#inline-block-text-align-table-cell-vertical-align" class="headerlink" title="inline-block + text-align + table-cell + vertical-align"></a>inline-block + text-align + table-cell + vertical-align</h4><p><strong>子元素于父元素垂直及水平居中且其（子元素与父元素）高度宽度均可变。</strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">display</span>: table-cell;</div><div class="line">  <span class="attribute">vertical-align</span>: middle;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>很容易便能看出，这其实是<code>inline-block</code>水平居中方案以及<code>table-cell</code>垂直居中方案的组合使用。</p>
<h4 id="absolute-transform-2"><a href="#absolute-transform-2" class="headerlink" title="absolute + transform"></a>absolute + transform</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.parent</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.child</span> &#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先利用<code>positions: absolute;left: 50%</code>的特性，使child的左侧移至parent的水平中央处，然后利用<code>transform</code>实现child自身的偏移。</p>
<blockquote>
<p>由于transform属性的<code>translate</code>的方法在设置百分比类型的值时，其参照对象是自身，因此只需要各设置50%，就能实现往水平方向偏移自身宽度的一半，又或往垂直方向偏移自身高度的一半。</p>
</blockquote>
<p>这个方法用起来不复杂，也很好理解，但缺点也非常明显：<strong>transform属性的兼容性问题</strong>。</p>
<h4 id="flex-justify-content-align-items"><a href="#flex-justify-content-align-items" class="headerlink" title="flex + justify-content + align-items"></a>flex + justify-content + align-items</h4><p>.parent{<br>    display: flex;<br>    justify-content: center;    //水平居中，相当于text-align<br>    align-items: center;    //垂直居中，相当于vertical-align<br>}<br>兼容性比上面的<code>transform</code>还要差。</p>
<h3 id="做解决方案步骤"><a href="#做解决方案步骤" class="headerlink" title="做解决方案步骤"></a>做解决方案步骤</h3><ol>
<li>要了解css属性的值的特性，比如<code>flex</code>, <code>display:table</code>, <code>display: inline-block</code>, <code>display: table-cell</code>。</li>
<li>对问题分解：水平居中，里面元素宽度不定，外面的元素宽度也不定。<br>这样先实现里面的元素的宽度跟着内容走，然后是实现水平居中。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CSS-reset&quot;&gt;&lt;a href=&quot;#CSS-reset&quot; class=&quot;headerlink&quot; title=&quot;CSS reset&quot;&gt;&lt;/a&gt;CSS reset&lt;/h2&gt;&lt;h3 id=&quot;placeholder-颜色重置&quot;&gt;&lt;a href=&quot;#placeholder-颜色重置&quot; class=&quot;headerlink&quot; title=&quot;placeholder 颜色重置&quot;&gt;&lt;/a&gt;placeholder 颜色重置&lt;/h3&gt;&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;:-moz-placeholder &amp;#123; color:#ccc&lt;/span&gt; !important; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;::-moz-placeholder &amp;#123; color:#ccc&lt;/span&gt; !important; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;:-ms-input-placeholder &amp;#123; color:#ccc&lt;/span&gt; !important; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;:-webkit-input-placeholder &amp;#123; color:#ccc&lt;/span&gt; !important; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端微专业笔记" scheme="https://moxinn.com/tags/%E5%89%8D%E7%AB%AF%E5%BE%AE%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>把Hexo同时部署到GitHub和GitCafe</title>
    <link href="https://moxinn.com/2016/01/26/hexo-github-gitcafe/"/>
    <id>https://moxinn.com/2016/01/26/hexo-github-gitcafe/</id>
    <published>2016-01-26T02:41:48.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h2><p>作为一个长期处在高墙内的中国人，在把Hexo部署在Github Pages上后，要时刻考虑如果Github也被丧心病狂地墙掉后，作为一个常用中文的博客，不能被墙内访问，多么寂寞。所以，尝试找个墙内的备胎Gitcafe。Gitcafe 也提供 Pages 服务，也官方支持 Hexo，实在是一个尽职的备胎。<br><a id="more"></a></p>
<h2 id="设置GitCafe"><a href="#设置GitCafe" class="headerlink" title="设置GitCafe"></a>设置GitCafe</h2><p>注册以后，创建一个项目，项目名需要与注册的用户名相同，默认分支选择gitcafe-pages,项目主页也是相同的。</p>
<h2 id="修改-config-yml"><a href="#修改-config-yml" class="headerlink" title="修改_config.yml"></a>修改_config.yml</h2><p>修改根目录下的_config.yml文件中的deploy<br>根据Hexo官方文档需要修改成下面的形式</p>
<blockquote>
<p>deploy:<br>  type: git<br>  message: [message]<br>  repo:<br>    github: <repository url="">,[branch]<br>    gitcafe: <repository url="">,[branch] </repository></repository></p>
</blockquote>
<p>例如我的是这样<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">message</span>: <span class="string">""</span></div><div class="line">  <span class="attribute">repo</span>: </div><div class="line">    <span class="attribute">github</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:yangmaoxin/yangmaoxin.github.io.git,master</div><div class="line">    <span class="attribute">gitcafe</span>: git<span class="variable">@gitcafe</span>.<span class="attribute">com</span>:ymx/ymx.git,gitcafe-pages</div></pre></td></tr></table></figure></p>
<p>将自己在Github和Gitcafe上的git填进去</p>
<h2 id="我遇到的问题"><a href="#我遇到的问题" class="headerlink" title="我遇到的问题"></a>我遇到的问题</h2><p>部署到线上的时候总是提示</p>
<blockquote>
<p>Everything up-to-date</p>
</blockquote>
<p>由于对git操作不是太了解，尝试把根目录下的.deploy文件夹删除。<br>然后重新执行一遍hexo clean hexo g hexo d一系列命令,就会成功提交。</p>
<h2 id="万网域名双线解析"><a href="#万网域名双线解析" class="headerlink" title="万网域名双线解析"></a>万网域名双线解析</h2><p>进入万网/阿里云后台，域名解析：</p>
<p><img src="http://7xkrpj.com1.z1.glb.clouddn.com/%E9%98%BF%E9%87%8C%E4%BA%91%E8%A7%A3%E6%9E%90.png" alt="域名解析"></p>
<p>添加两条CNAME，分别解析，解析路线选择默认至GitCafe，海外IP至GitHub。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;尝试&quot;&gt;&lt;a href=&quot;#尝试&quot; class=&quot;headerlink&quot; title=&quot;尝试&quot;&gt;&lt;/a&gt;尝试&lt;/h2&gt;&lt;p&gt;作为一个长期处在高墙内的中国人，在把Hexo部署在Github Pages上后，要时刻考虑如果Github也被丧心病狂地墙掉后，作为一个常用中文的博客，不能被墙内访问，多么寂寞。所以，尝试找个墙内的备胎Gitcafe。Gitcafe 也提供 Pages 服务，也官方支持 Hexo，实在是一个尽职的备胎。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://moxinn.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://moxinn.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+Github，搭建属于自己的博客</title>
    <link href="https://moxinn.com/2016/01/25/hexo-my-blog/"/>
    <id>https://moxinn.com/2016/01/25/hexo-my-blog/</id>
    <published>2016-01-25T04:14:06.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="什么是GitHub-Pages"><a href="#什么是GitHub-Pages" class="headerlink" title="什么是GitHub Pages"></a>什么是GitHub Pages</h3><p>本是用于介绍托管在 GitHub 的项目，现很流行用来搭建博客，有300M免费空间。</p>
<h3 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo"></a>什么是Hexo</h3><blockquote>
<p>快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp; powerful blog<br>framework,powered by Node.js.</p>
</blockquote>
<p>类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。<br>本博客就是使用hexo创建并托管在github上。</p>
<h3 id="为什么要用hexo"><a href="#为什么要用hexo" class="headerlink" title="为什么要用hexo?"></a>为什么要用hexo?</h3><blockquote>
<p>不可思议的快速 ─ 只要一眨眼静态文件即生成完成<br>支持 Markdown<br>仅需一道指令即可部署到 GitHub Pages 和 Heroku<br>已移植 Octopress 插件<br>高扩展性、自订性<br>兼容于 Windows, Mac &amp; Linux</p>
</blockquote>
<p>以上是引用作者的话。</p>
<p>对我而言，一个界面简洁，可以使用markdown写作，前期搭建的感觉很有B格。<br>所以记录一下搭建的过程以便之后回来方便查看。<br><a id="more"></a></p>
<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装Node"><a href="#安装Node" class="headerlink" title="安装Node"></a>安装Node</h3><p>作用：用来生成静态页面的。<br>到Node.js官网下载相应平台的最新版本，一路安装即可。</p>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p>作用：把本地的hexo内容提交到github上去.</p>
<p>msysgit是Windows版的Git，从<a href="https://git-for-windows.github.io" target="_blank" rel="external">这里</a>下载，然后按默认选项安装即可。具体查看<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰Git教程</a></p>
<h3 id="申请GitHub"><a href="#申请GitHub" class="headerlink" title="申请GitHub"></a>申请GitHub</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的。</p>
<p>github账号直接申请就行，跟一般的注册账号差不多，SSH Keys，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候需要手动输入账号密码，配置后不需要密码，网上有很多教程。</p>
<h3 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h3><p>使用hexo博客必须配置SSH。<br>打开git bash，输入<code>cd ~/.ssh</code>，如果果提示：No such file or directory 说明未配置SSH。</p>
<ul>
<li>本地生成密钥对<br><code>ssh-keygen -t rsa -C &quot;你的邮件地址&quot;</code>，注意命令中的大小写不要搞混。按提示指定保存文件夹，不设置密码。</li>
<li>添加公钥到Github<ol>
<li>根据上一步的提示，找到公钥文件（默认为id_rsa.pub），用记事本打开，全选并复制。</li>
<li>登录Github，右上角 头像 -&gt; <code>Settings</code> —&gt; <code>SSH keys</code> —&gt; <code>Add SSH</code> key。把公钥粘贴到key中，填好title并点击 <code>Add key</code>。</li>
<li>git bash中输入命令<code>ssh -T git@github.com</code>，选yes，等待片刻可看到成功提示。</li>
</ol>
</li>
<li>修改本地的ssh remote url，不用https协议，改用git协议<ol>
<li>Github仓库中获取ssh协议相应的url</li>
<li>本地仓库执行命令<code>git remote set-url origin SSH</code>对应的url，配置完后可用<code>git remote -v</code>查看结果</li>
</ol>
</li>
</ul>
<p>这样<code>git push</code>或<code>hexo d</code>时不再需要输入账号密码。</p>
<h2 id="hexo安装和使用"><a href="#hexo安装和使用" class="headerlink" title="hexo安装和使用"></a>hexo安装和使用</h2><p>以下命令行需要在Git终端中执行。</p>
<ul>
<li>创建一个新文件夹作为hexo的安装目录，这样hexo文件都在里面，主要是为了方便管理。</li>
<li>在这个文件夹内，右键打开git bash(这里是以windows系统为例。)。注意：最好使用管理员身份打开。</li>
<li><p>安装hexo</p>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">npm</span> install -g hexo <span class="comment">#可用hexo -v查看版本。这里我用的是3.1.1。 </span></div><div class="line"><span class="built_in">npm</span> update hexo -g <span class="comment">#升级</span></div></pre></td></tr></table></figure>
</li>
<li><p>布置hexo</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo</span> init <span class="comment">#初始化</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>hexo 会在目标文件夹建立网站所需要的所有文件。</p>
<ul>
<li>安装依赖包：npm install</li>
<li>创建Github Repository：Repository名字必须是你的Github名.github.io，比如我是yangmaoxin.github.io</li>
<li>部署：打开博客根目录下的_config.yml文件，末尾添加如下信息。<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">deploy:</span></div><div class="line"><span class="symbol">  type:</span> git</div><div class="line"><span class="symbol">  repository:</span> 上一步的Github仓库地址，项目主页点SSH再复制URL</div><div class="line"><span class="symbol">  branch:</span> master</div></pre></td></tr></table></figure>
</li>
</ul>
<p>然后执行命令：<br><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> # 生成静态页面，可以简化为hexo g</div><div class="line">hexo deploy # 部署到Github，可以简化为hexo d</div></pre></td></tr></table></figure></p>
<p>浏览器访问yangmaoxin.github.io就能看到自己的Blog了，一般延迟十分钟左右才能看到效果。一开始看到404页面不要惊慌，耐心等等。</p>
<h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">hexo n <span class="string">"我的博客"</span> == hexo new <span class="string">"我的博客"</span> #新建文章</div><div class="line">hexo p == hexo publish</div><div class="line">hexo g == hexo generate#生成</div><div class="line">hexo s == hexo<span class="built_in"> server </span>#启动服务预览</div><div class="line">hexo d == hexo deploy#部署</div></pre></td></tr></table></figure>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">hexo<span class="built_in"> server </span>#Hexo 会监视文件变动并自动更新，您无须重启服务器。</div><div class="line">hexo<span class="built_in"> server </span>-s #静态模式</div><div class="line">hexo<span class="built_in"> server </span>-p 5000 #更改端口</div><div class="line">hexo<span class="built_in"> server </span>-i 192.168.1.1 #自定义 IP</div><div class="line"></div><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class="line">hexo g #生成静态网页</div><div class="line">hexo d #开始部署</div></pre></td></tr></table></figure>
<h3 id="监视文件变动"><a href="#监视文件变动" class="headerlink" title="监视文件变动"></a>监视文件变动</h3><figure class="highlight verilog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">generate</span> #使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo <span class="keyword">generate</span> --watch #监视文件变动</div></pre></td></tr></table></figure>
<h3 id="完成后部署"><a href="#完成后部署" class="headerlink" title="完成后部署"></a>完成后部署</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#以下两个命令的作用是相同的</span></div><div class="line">hexo generate --deploy</div><div class="line">hexo deploy --generate</div><div class="line">hexo deploy -g</div><div class="line">hexo<span class="built_in"> server </span>-g</div></pre></td></tr></table></figure>
<h3 id="草稿"><a href="#草稿" class="headerlink" title="草稿"></a>草稿</h3><pre><code>hexo publish [layout] &lt;title&gt;
</code></pre><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">hexo <span class="keyword">new</span> <span class="string">"postName"</span> <span class="meta">#新建文章</span></div><div class="line">hexo <span class="keyword">new</span> page <span class="string">"pageName"</span> <span class="meta">#新建页面</span></div><div class="line">hexo generate <span class="meta">#生成静态页面至public目录</span></div><div class="line">hexo <span class="keyword">server</span> <span class="meta">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></div><div class="line">hexo deploy <span class="meta">#将.deploy目录部署到GitHub</span></div><div class="line"></div><div class="line">hexo <span class="keyword">new</span> [layout] &lt;title&gt;</div><div class="line">hexo <span class="keyword">new</span> photo <span class="string">"My Gallery"</span></div><div class="line">hexo <span class="keyword">new</span> <span class="string">"Hello World"</span> --lang tw</div></pre></td></tr></table></figure>
<p>更多的hexo命令可以到<a href="http://segmentfault.com/a/1190000002632530#articleHeader10" target="_blank" rel="external">这里</a>查看</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;h3 id=&quot;什么是GitHub-Pages&quot;&gt;&lt;a href=&quot;#什么是GitHub-Pages&quot; class=&quot;headerlink&quot; title=&quot;什么是GitHub Pages&quot;&gt;&lt;/a&gt;什么是GitHub Pages&lt;/h3&gt;&lt;p&gt;本是用于介绍托管在 GitHub 的项目，现很流行用来搭建博客，有300M免费空间。&lt;/p&gt;
&lt;h3 id=&quot;什么是Hexo&quot;&gt;&lt;a href=&quot;#什么是Hexo&quot; class=&quot;headerlink&quot; title=&quot;什么是Hexo&quot;&gt;&lt;/a&gt;什么是Hexo&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;快速、简单且功能强大的 Node.js 博客框架。 A fast, simple &amp;amp; powerful blog&lt;br&gt;framework,powered by Node.js.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类似于jekyll、Octopress、Wordpress，我们可以用hexo创建自己的博客，托管到github或Heroku上，绑定自己的域名，用markdown写文章。&lt;br&gt;本博客就是使用hexo创建并托管在github上。&lt;/p&gt;
&lt;h3 id=&quot;为什么要用hexo&quot;&gt;&lt;a href=&quot;#为什么要用hexo&quot; class=&quot;headerlink&quot; title=&quot;为什么要用hexo?&quot;&gt;&lt;/a&gt;为什么要用hexo?&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;不可思议的快速 ─ 只要一眨眼静态文件即生成完成&lt;br&gt;支持 Markdown&lt;br&gt;仅需一道指令即可部署到 GitHub Pages 和 Heroku&lt;br&gt;已移植 Octopress 插件&lt;br&gt;高扩展性、自订性&lt;br&gt;兼容于 Windows, Mac &amp;amp; Linux&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以上是引用作者的话。&lt;/p&gt;
&lt;p&gt;对我而言，一个界面简洁，可以使用markdown写作，前期搭建的感觉很有B格。&lt;br&gt;所以记录一下搭建的过程以便之后回来方便查看。&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="https://moxinn.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo" scheme="https://moxinn.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>HTML笔记</title>
    <link href="https://moxinn.com/2015/12/22/html/"/>
    <id>https://moxinn.com/2015/12/22/html/</id>
    <published>2015-12-22T02:04:56.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《网页制作》之HTML"><a href="#《网页制作》之HTML" class="headerlink" title="《网页制作》之HTML"></a>《网页制作》之HTML</h2><hr>
<h3 id="HTML简介"><a href="#HTML简介" class="headerlink" title="HTML简介"></a>HTML简介</h3><p><strong>关于HTML的部分主要是熟悉标签的用法规则，明确标签语义化，避免以前滥用div标签的习惯。</strong><br>具体的课堂笔记可以在<a href="http://wiki.jikexueyuan.com/project/fend_note/" target="_blank" rel="external">前端开发笔记本</a>中查询到，以后多写写在课程中学到理解到的东西，而不仅仅只是把PPT的内容提炼出来，这样是不够的。</p>
<a id="more"></a>
<p><img src="http://wiki.jikexueyuan.com/project/fend_note/images/H/html-overview.png" alt="此处输入图片的描述"></p>
<h3 id="HTML标签语义化："><a href="#HTML标签语义化：" class="headerlink" title="HTML标签语义化："></a>HTML标签语义化：</h3><p>标签的用途：语义化，让网页更好的被搜索引擎理解。</p>
<p>什么叫做语义化呢，说的通俗点就是：明白每个标签的用途（在什么情况下使用此标签合理）比如，网页上的文章的标题就可以用标题标签，网页上的各个栏目的栏目名称也可以使用标题标签。文章中内容的段落就得放在段落标签中，在文章中有想强调的文本，就可以使用 em 标签表示强调等等。</p>
<h3 id="语义化可以给我们带来什么样的好处呢？"><a href="#语义化可以给我们带来什么样的好处呢？" class="headerlink" title="语义化可以给我们带来什么样的好处呢？"></a>语义化可以给我们带来什么样的好处呢？</h3><ul>
<li>更容易被搜索引擎收录(SEO)。</li>
<li>更容易让屏幕阅读器读出网页内容(可访问性)。</li>
<li>代码可读性</li>
</ul>
<h3 id="HTML常用标签"><a href="#HTML常用标签" class="headerlink" title="HTML常用标签"></a>HTML常用标签</h3><p>HTML常见的标签，及其用法，参考下面网站链接：<a href="http://www.runoob.com/tags/html-reference.html" target="_blank" rel="external">HTML参考手册</a></p>
<h3 id="浏览器兼容"><a href="#浏览器兼容" class="headerlink" title="浏览器兼容"></a>浏览器兼容</h3><p>主流浏览器都兼容HTML5的新标签，对于 IE8 及以下版本不认识 HTML5的新元素，可以使用 JavaScript 创建一个没用的元素来解决，例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.createElement(“header”);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<p>也可以使用shiv来解决兼容性问题，详情可参考<a href="https://github.com/afarkas/html5shiv" target="_blank" rel="external">HTML5 Shiv</a></p>
<h3 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h3><p>在 HTML 中，某些字符是预留的。<br>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。<br>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。<br>字符实体类似这样：<br>&amp;entity_name;或&amp;#entity_number;</p>
<p>常用实体字符:<a href="http://www.runoob.com/tags/ref-entities.html" target="_blank" rel="external">HTML字符实体参考手册</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《网页制作》之HTML&quot;&gt;&lt;a href=&quot;#《网页制作》之HTML&quot; class=&quot;headerlink&quot; title=&quot;《网页制作》之HTML&quot;&gt;&lt;/a&gt;《网页制作》之HTML&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;HTML简介&quot;&gt;&lt;a href=&quot;#HTML简介&quot; class=&quot;headerlink&quot; title=&quot;HTML简介&quot;&gt;&lt;/a&gt;HTML简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;关于HTML的部分主要是熟悉标签的用法规则，明确标签语义化，避免以前滥用div标签的习惯。&lt;/strong&gt;&lt;br&gt;具体的课堂笔记可以在&lt;a href=&quot;http://wiki.jikexueyuan.com/project/fend_note/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;前端开发笔记本&lt;/a&gt;中查询到，以后多写写在课程中学到理解到的东西，而不仅仅只是把PPT的内容提炼出来，这样是不够的。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端微专业笔记" scheme="https://moxinn.com/tags/%E5%89%8D%E7%AB%AF%E5%BE%AE%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Photoshop切图</title>
    <link href="https://moxinn.com/2015/12/22/photoshop/"/>
    <id>https://moxinn.com/2015/12/22/photoshop/</id>
    <published>2015-12-22T02:01:46.000Z</published>
    <updated>2018-07-17T06:57:21.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《网页制作》之Photoshop切图"><a href="#《网页制作》之Photoshop切图" class="headerlink" title="《网页制作》之Photoshop切图"></a>《网页制作》之Photoshop切图</h2><hr>
<h3 id="工具、面板、视图"><a href="#工具、面板、视图" class="headerlink" title="工具、面板、视图"></a>工具、面板、视图</h3><h4 id="什么是切图"><a href="#什么是切图" class="headerlink" title="什么是切图"></a>什么是切图</h4><ol>
<li>从设计稿（.psd文件）里切出网页素材（.png/.jpg文件）</li>
<li>编写代码，在代码中引入切图，实现静态页面</li>
</ol>
<h4 id="为什么要切图？"><a href="#为什么要切图？" class="headerlink" title="为什么要切图？"></a>为什么要切图？</h4><p>给网页提供图片素材：</p>
<ul>
<li>HTML:img </li>
<li>CSS:background</li>
</ul>
 <a id="more"></a>
<h3 id="如何切图？—使用PS工具（Photoshop）"><a href="#如何切图？—使用PS工具（Photoshop）" class="headerlink" title="如何切图？—使用PS工具（Photoshop）"></a>如何切图？—使用PS工具（Photoshop）</h3><h4 id="PS首选项设置："><a href="#PS首选项设置：" class="headerlink" title="PS首选项设置："></a>PS首选项设置：</h4><p>编辑&gt;首选项&gt;单位与标尺： 将单位（标尺/文字）改成像素。</p>
<h4 id="面板："><a href="#面板：" class="headerlink" title="面板："></a>面板：</h4><p>在“窗口”菜单下开启：工具/选项/信息（F8）/图层/历史记录<br>调整面板后，需要保存工作区：窗口&gt;工作区&gt;新建工作区</p>
<h4 id="切图常用工具："><a href="#切图常用工具：" class="headerlink" title="切图常用工具："></a>切图常用工具：</h4><ul>
<li>移动工具：在选项面板中设置：自动选择，图层。</li>
<li>矩形选框工具</li>
<li>魔棒工具</li>
<li>裁剪工具+切片工具</li>
<li>缩放工具：快捷键：放大：Ctrl + 加号；缩小：Ctrl+减号；100%：Ctrl + 1;</li>
<li>取色器：吸取颜色</li>
</ul>
<h4 id="辅助视图"><a href="#辅助视图" class="headerlink" title="辅助视图"></a>辅助视图</h4><p>在“视图”菜单下开启：对齐/标尺（Ctrl+R）/显示&gt;参考线（Ctrl+;）<br>需要开启视图菜单下的显示额外内容，才能看到画布里的参考线和网格。</p>
<h3 id="测量、取色"><a href="#测量、取色" class="headerlink" title="测量、取色"></a>测量、取色</h3><h4 id="获取设计稿信息："><a href="#获取设计稿信息：" class="headerlink" title="获取设计稿信息："></a>获取设计稿信息：</h4><ul>
<li>尺寸信息：通过“测量”获取</li>
<li>颜色信息：通过“取色”获取</li>
</ul>
<h4 id="测量（所有数字都要测量）："><a href="#测量（所有数字都要测量）：" class="headerlink" title="测量（所有数字都要测量）："></a>测量（所有数字都要测量）：</h4><ul>
<li>测量方式：矩形选框工具&amp;信息面板</li>
<li>测量数据：高度、高度/内边距、外边界/边框、定位、文字大小、行高、背景图位置。</li>
</ul>
<h4 id="矩形选框工具："><a href="#矩形选框工具：" class="headerlink" title="矩形选框工具："></a>矩形选框工具：</h4><ul>
<li>添加到选取：按住Shift</li>
<li>从选取减去：按住Alt</li>
<li>与选取交叉：按住Shift+Alt</li>
</ul>
<p><strong>选择页面较大区域方法：在左侧画一个小矩形框，在右侧再画一个小矩形框，在信息视图里显示相关区域的大小。</strong></p>
<h4 id="取色："><a href="#取色：" class="headerlink" title="取色："></a>取色：</h4><ul>
<li>取色方式：“拾色器&amp;吸管工具”：</li>
<li>吸取：边框色/背景色/文字色。</li>
</ul>
<p><strong>取色工具巧用：使用“魔棒工具”来确定是否是线性渐变。</strong></p>
<h3 id="切图"><a href="#切图" class="headerlink" title="切图"></a>切图</h3><ul>
<li><strong>内容性图片</strong> 指的是图片在页面是作为内容存在，如页面中的海报。修饰性图片应保存为 png24（IE6不支持半透明）或png8。</li>
<li><strong>修饰性图片</strong> 指的是图片在页面中起修饰作用，如页面中的背景和图标。切出的内容性图片应保存为 *.jpg 格式。</li>
</ul>
<h4 id="切图步骤"><a href="#切图步骤" class="headerlink" title="切图步骤"></a>切图步骤</h4><p><strong>隐藏文字只留背景</strong></p>
<blockquote>
<p>A: 若文字为独立图层，隐藏文字图层</p>
<ul>
<li>找到文字图层</li>
<li>去掉眼睛图标</li>
</ul>
<p>B:若文字和背景合并，平铺背景覆盖文字 </p>
<pre><code>- 矩形选框工具
- 自由变换（Ctrl+T）(用于背景图像可以拉伸)
- 使用移动工具+Alt（用于背景图像不能拉伸）
</code></pre></blockquote>
<h4 id="切图方法"><a href="#切图方法" class="headerlink" title="切图方法"></a>切图方法</h4><blockquote>
<p><strong>PNG24切图方法</strong></p>
<ul>
<li>移动工具选中所需图层（Ctrl 多选） </li>
<li>右键合并图层（Ctrl + E）</li>
<li>复制到新图层，或直接拖至已有文件（新建：Ctrl+N）</li>
</ul>
<p><strong>PNG8带背景切图方法</strong></p>
<ul>
<li>合并（可见）图层（Shift+Ctrl+E）; </li>
<li>矩形选框工具选择内容</li>
<li>魔棒工具去掉多余部分（从选区中减去：按住Alt）</li>
<li>再右键复制图层到新文件，或直接拖至已有文件（新建：Ctrl+N）</li>
</ul>
<p><strong>可平铺背景的切图方法</strong> </p>
<ul>
<li>用矩形选择一个区域，复制粘贴到新文件中（平铺内容充满文件的宽(X轴)或高(Yz轴)）</li>
</ul>
<p><strong>活动页的切图——适用于可以一刀切的活动页</strong></p>
<ul>
<li>拉参考线 </li>
<li>选择切片工具 </li>
<li>点击“基于参考线的切片”按钮 </li>
<li>为切片命名 </li>
<li>保存（全选切片，统一设置存储格式）</li>
</ul>
</blockquote>
<h3 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h3><p><strong>存储所需内容</strong><br>复制（Ctrl+C）、新建（Ctrl+N）、粘贴（Ctrl+V）<br>存储为web所用格式（Alt+Shift+Ctrl+S）</p>
<p><strong>保存类型：</strong></p>
<blockquote>
<p>A:当图片色彩丰富且无透明要求时，建议保存为JPG格式并选择合适的品质(60-80)。</p>
<p>B:当图片色彩不太丰富时，无论有无透明要求，保存为PNG8格式。（需设置杂边：无；仿色：无仿色。）</p>
<p>C:当图片有半透明要求时，保存为PNG24格式。</p>
<p>D:为保证图片质量，需保留一份PSD, 在PSD上进行修改。</p>
</blockquote>
<h3 id="修改、维护"><a href="#修改、维护" class="headerlink" title="修改、维护"></a>修改、维护</h3><blockquote>
<p>A:更改画布大小： 图像&gt;画布大小&gt;更改尺寸，同时将“定位”选在左上角。</p>
<p>B:移动图标： 若图标为独立图层，则用移动工具拖动即可；若图标为非独立图层，先选用矩形选框工具选中图层，在用移动工具拖动即可。</p>
<p>C:减小画布到指定区域：用矩形选框工具选定选区–裁剪（或直接用裁剪工具裁剪）</p>
<p>D:修改PNG8图像时，需要更改颜色模式为：RGB格式。（PNG8默认颜色为索引颜色，直接修改会使颜色失真。）</p>
</blockquote>
<h3 id="图片优化与合并"><a href="#图片优化与合并" class="headerlink" title="图片优化与合并"></a>图片优化与合并</h3><h4 id="使用背景图"><a href="#使用背景图" class="headerlink" title="使用背景图"></a>使用背景图</h4><h4 id="图片合并方案"><a href="#图片合并方案" class="headerlink" title="图片合并方案"></a>图片合并方案</h4><p><strong>Sprite拼图</strong>：把设计稿里的小图标，拼合在一张图片上。<br>Sprite拼图好处：减少网络请求，提升网页加载速度。</p>
<h4 id="图片优化合并："><a href="#图片优化合并：" class="headerlink" title="图片优化合并："></a>图片优化合并：</h4><p><strong>大小与质量</strong></p>
<ul>
<li>平衡与取舍：选择合适的图片大小与合适的图片质量</li>
<li>压缩工具：无损压缩 Minimage；有损压缩 TinyPng</li>
</ul>
<p><strong>图片合并建议方案：</strong></p>
<ul>
<li>同个模块的图片合并 </li>
<li>大小相近的图片合并 </li>
<li>色彩相近的图片合并 </li>
<li>以上3种合并混合</li>
</ul>
<blockquote>
<p>合并的图片可以以横向或纵向的排列，分类可将同属于一个模块（功能模块），大小相近（充分利用画布空间），颜色相近（减少文件大小）。<br>浏览器兼容方案</p>
</blockquote>
<h3 id="浏览器兼容方案"><a href="#浏览器兼容方案" class="headerlink" title="浏览器兼容方案"></a>浏览器兼容方案</h3><ul>
<li>IT6不支持PNG24半透明：存2份：png 24; sprite_ie.png 8. </li>
<li>CSS3&amp;切图:</li>
</ul>
<p>高级浏览器CSS3,低级浏览器用切图，hack处理；<br>优雅降级原则：都用CSS3处理，低级浏览器里没有效果。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《网页制作》之Photoshop切图&quot;&gt;&lt;a href=&quot;#《网页制作》之Photoshop切图&quot; class=&quot;headerlink&quot; title=&quot;《网页制作》之Photoshop切图&quot;&gt;&lt;/a&gt;《网页制作》之Photoshop切图&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;工具、面板、视图&quot;&gt;&lt;a href=&quot;#工具、面板、视图&quot; class=&quot;headerlink&quot; title=&quot;工具、面板、视图&quot;&gt;&lt;/a&gt;工具、面板、视图&lt;/h3&gt;&lt;h4 id=&quot;什么是切图&quot;&gt;&lt;a href=&quot;#什么是切图&quot; class=&quot;headerlink&quot; title=&quot;什么是切图&quot;&gt;&lt;/a&gt;什么是切图&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;从设计稿（.psd文件）里切出网页素材（.png/.jpg文件）&lt;/li&gt;
&lt;li&gt;编写代码，在代码中引入切图，实现静态页面&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;为什么要切图？&quot;&gt;&lt;a href=&quot;#为什么要切图？&quot; class=&quot;headerlink&quot; title=&quot;为什么要切图？&quot;&gt;&lt;/a&gt;为什么要切图？&lt;/h4&gt;&lt;p&gt;给网页提供图片素材：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML:img &lt;/li&gt;
&lt;li&gt;CSS:background&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://moxinn.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端微专业笔记" scheme="https://moxinn.com/tags/%E5%89%8D%E7%AB%AF%E5%BE%AE%E4%B8%93%E4%B8%9A%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
